<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: theory | theory.so]]></title>
  <link href="http://theory.so/categories/theory/atom.xml" rel="self"/>
  <link href="http://theory.so/"/>
  <updated>2014-01-13T16:33:41-08:00</updated>
  <id>http://theory.so/</id>
  <author>
    <name><![CDATA[David E. Wheeler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
    <entry>
      




<title type="html"><![CDATA[→ Brent Simmons is Not Wrong]]></title>
<link href="http://inessential.com/2014/01/02/vesper_sync_diary_7_audibles"/>
<updated>2014-01-10T11:02:00-08:00</updated>
<id>http://theory.so/theory/2014/01/10/brent-simmons-is-not-wrong</id>

      <content type="html"><![CDATA[<p>Brent Simmons:</p>

<blockquote><p>Database people are already gasping for air, because they know what’s coming.
Instead of creating a separate table for attachment metadata, I created an
attachments column in the notes table and just encoded the attachment
metadata there.</p>

<p>On iOS it uses Core Data’s built-in object archiving feature. On the server
it’s stored as JSON.</p>

<p>This is wrong, surely; it’s not how to do this. Except, in this case, it is.
Incomplete object graphs are wrong; inefficient and slower syncing with more
complex server-side code is also wrong.</p>

<p>This is <em>less wrong than the alternatives.</em></p></blockquote>

<p>Some database folks might be gasping for air, but not those of us steeped in
relational theory. In <em><a href="http://www.amazon.com/Database-Depth-Relational-Theory-Practitioners/dp/0596100124/justatheory-20">Database in Depth</a></em>, relational theorist <a href="http://en.wikipedia.org/wiki/Christopher_J._Date">C.J. Date</a>
poses a question:</p>

<p><a href="http://www.amazon.com/Database-Depth-Relational-Theory-Practitioners/dp/0596100124/justatheory-20"><img class="right" src="http://ecx.images-amazon.com/images/I/41Z2NjCztCL.jpg" width="300" title="“Database in Depth,” by C.J. Date" ></a></p>

<blockquote><p>In Chapter 1, I said that 1NF meant that every tuple in every relation
contains just a single value (of the appropriate type, of course) in every
attribute position&mdash;and it’s usual to add that those “single values” are
supposed to be atomic. But this latter requirement raises the obvious
question: what does it mean for data to be atomic?</p>

<p>Well, on page 6 of the book mentioned earlier, Codd defines atomic data as
data that “cannot be decomposed into smaller pieces by the DBMS (excluding
certain special functions).” But even if we ignore that parenthetical
exclusion, this definition is a trifle puzzling, and not very precise. For
example, what about character strings? Are character strings atomic? Every
product I know provides several operators on such strings—LIKE, SUBSTR
(substring), “||” (concatenate), and so on—that clearly rely on the fact that
character strings in general can be decomposed by the DBMS. So are those
strings atomic? What do you think?</p></blockquote>

<p>The whole book is worth a read, especially the first four chapters, as it
does an excellent job of dispelling the myth that complex data types are
verboten in a properly normalized relational model. Another gem:</p>

<blockquote><p>But I could have used any number of different examples to make my point: I
could have shown attributes (and therefore domains) that contained arrays; or
bags; or lists; or photographs; or audio or video recordings; or X rays; or
fingerprints; or XML documents; or any other kind of value, “atomic” or
“nonatomic,” that you might care to think of. Attributes, and therefore
domains, can contain anything (any values, that is). All of which goes a long
way, incidentally, toward explaining why a true “object/relational” system
would be nothing more nor less than a true relational system—which is to say,
a system that supports the relational model, with all that such support
entails.</p></blockquote>

<p>This is exactly why PostgreSQL offers <a href="http://www.postgresql.org/docs/current/static/arrays.html">array</a>, <a href="http://www.postgresql.org/docs/current/static/datatype-xml.html">XML</a>, and <a href="http://www.postgresql.org/docs/current/static/datatype-json.html">JSON</a> data types:
because sometimes, they are exactly what you need to properly model your
system.</p>

<p>So you go, Brent, you&rsquo;re doing it exactly right.</p>

<p><a rel="bookmark" href="http://theory.so/theory/2014/01/10/brent-simmons-is-not-wrong/">§</a></p>

]]></content>
    </entry>
  
</feed>

